#!/bin/bash
#make pushd silent
pushd() {
  command pushd "$@" >/dev/null
}
#make popd silent
popd() {
  command popd "$@" >/dev/null
}

YOUTUBECOMMAND=""

if command -v "yt-dlp" &>/dev/null; then
  YOUTUBECOMMAND="yt-dlp"
elif command -v "youtube-dl" &>/dev/null; then
  YOUTUBECOMMAND="youtube-dl"
else
  echo 'youtube-dl or yt-dlp is required, for more support please reference the README'
  exit
fi

LINKS=0
#set the install directory as the current directory as soon as the program starts
homedir=~/.config/easydl/
#Variables for coloring text
CYAN='\033[0;36m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

execute_flags() {
  if [ "$1" = '-i' ]; then
    alias_initialize
  elif [ "$1" = '-a' ]; then
    alias_add
  elif [ "$1" = '-d' ]; then
    alias_display
  elif [ "$1" = '-e' ]; then
    alias_edit
  elif [ "$1" = '-r' ]; then
    alias_remove
  elif [ "$1" = '-c' ]; then
    alias_clear
  elif [ "$1" = '-y' ]; then
    echo "opening nano so you can edit the youtube commands"
    sleep 3
    nano ~/.config/easydl/youtube_commands.sh
  elif [ "$1" = '-h' ]; then
    echo '-i initliazes the alias.sh file to allow alias creation. Will delete previous aliases if present'
    echo '-a add a new alias'
    echo '-d display all of your aliases'
    echo "-e edit an alias"
    echo '-r remove an alias'
    echo '-c clear all aliases'
    echo '-y edit the youtube-dl commands'
    echo '--readme Open the README in nano (~/.config/easydl/README.md)'
    echo '--cut open cutter'
  elif [ "$1" = '--readme' ]; then
    showREADME
  elif [ "$1" = '--cut' ]; then
    cutter
  else
    main
  fi
}

main() {
  YORN='y'
  source $homedir/alias.sh
  while [ "${YORN}" = 'y' ]; do
    echo 'video (mp4) or audio'
    read -r -p 'video or audio> ' format
    echo ''
    if [ "$format" = "audio" ]; then
      echo 'what audio format would you like? ("best", "aac", "flac", "mp3", "m4a", "opus", "vorbis", or "wav" with best giving the best possible format)'
      read -r -p 'audio format> ' audioFormat
      summaryFormat="$audioFormat"
      echo ''
    else
      summaryFormat="Video"
    fi
    echo 'what url?'
    read -r -p 'paste url here (ctrl shift v)> ' url
    echo ''
    echo 'would you like to download a playlist?'
    read -r -p 'yes or no> ' wantsPlaylist
    echo ''
    if [[ "$wantsPlaylist" != "yes" ]] && [[ "$wantsPlaylist" != "no" ]]; then
      echo 'error: invalid answer'
      echo 'please answer with "yes" or "no" only'
      exit
    fi
    if [ $LINKS -gt 0 ]; then
      echo 'same directory as before?'
      read -r -p 'y or n> ' yesorno
      echo ''
      if [ "${yesorno}" = 'n' ]; then
        echo 'where do you want it? ex ~/Videos/ or /media/'
        read -r -p 'directory> ' down_dir
        echo ''
        check_alias "$down_dir"
      fi
    elif [ $LINKS -eq 0 ]; then
      echo 'where do you want it? ex ~/Videos/ or /media/'
      read -r -p 'directory> ' down_dir
      echo ''
      check_alias "$down_dir"
    fi
    isPlaylist=$($YOUTUBECOMMAND -o "%(playlist_title)s" --get-filename --playlist-items 1 "$url")
    if [ "$isPlaylist" = "NA" ]; then # link is not a playlist
      #get video title
      downloadTitle=$($YOUTUBECOMMAND --get-title "$url")
    else
      if [ "$wantsPlaylist" = "no" ]; then
        #get video title of single youtube video form playlist
        downloadTitle=$($YOUTUBECOMMAND --no-playlist --get-title "$url")
      else
        #set video title to the url (playlist)
        downloadTitle=$($YOUTUBECOMMAND -o "%(playlist_title)s" --get-filename --playlist-items 1 "$url")
      fi
    fi
    echo '
    
    '
    #give the user a summary of what is about to happen (it gives them the url, the format, and the actual directory that it will be downloaded to)
    echo 'Downloading "'"$downloadTitle"'" as a(n) '"$summaryFormat"' file in' "$finaldir"
    sleep 5
    echo '

    '

    source $homedir/youtube_commands.sh
    #check which format the user defined
    if [ "$wantsPlaylist" = "no" ]; then
      if [ "${format}" = 'audio' ]; then
        pushd "$finaldir"
        YoutubeAudio $url $audioFormat
        popd
      elif [ "${format}" = 'video' ]; then
        pushd "$finaldir"
        YoutubeVideo $url
        popd
      else
        echo 'that is not understood, please type video or audio only'
      fi
    else
      if [ "${format}" = 'audio' ]; then
        pushd "$finaldir"
        YoutubeAudioPlaylist $url $audioFormat
        popd
      elif [ "${format}" = 'video' ]; then
        pushd "$finaldir"
        YoutubeVideoPlaylist $url
        popd
      else
        echo 'that is not understood, please type video or audio only'
      fi
    fi

    echo '
    
    '
    echo 'done, do you have more?'
    read -r -p 'y or n> ' YORN
    if [ "${YORN}" = 'y' ]; then
      ((LINKS = LINKS + 1))
    fi
  done
  echo ""
  echo 'have a nice day :)'
}

check_alias() {
  foundalias="false"
  source $homedir/alias.sh
  arg=$1
  for index in "${!aliasnames[@]}"; do
    name=${aliasnames[$index]}
    if [ "$name" = "$arg" ]; then
      regularDirectory="${aliasvalues[$index]}"
      foundalias="true"
    fi
  done
  if [ "$foundalias" != "true" ]; then
    regularDirectory="$arg"
  fi
  # finaldir is the name of the output variable
  expandPath "$regularDirectory" "finaldir"
}

alias_initialize() {
  touch $homedir/alias.sh
  chmod a+x $homedir/alias.sh
  echo "aliasnames=()" >$homedir/alias.sh
  echo "aliasvalues=()" >>$homedir/alias.sh
}

alias_add() {
  echo "Adding an Alias"
  echo "What would you like to name your alias"
  read -r -p "name > " name
  echo "And where would you like the actual directory to be located ex. ~/Videos/Movies/"
  read -r -p "directory > " dir
  #append the name to the name array
  echo "aliasnames+=("$name")" >>$homedir/alias.sh
  #append the directory to the value array
  echo "aliasvalues+=("$dir")" >>$homedir/alias.sh
  echo "All done!"
  echo "Why not give it a try :)"
}
alias_display() {
  source $homedir/alias.sh
  for index in "${!aliasnames[@]}"; do
    echo -e "Name: \c"
    echo ${aliasnames[$index]}
    echo -e "Directory: \c"
    echo ${aliasvalues[$index]}
    echo ''
  done
}

alias_edit() {
  source $homedir/alias.sh
  foundalias="false"
  echo "Editing an existing Alias"
  echo "What is the name of the alias you would like to edit?"
  read -r -p "name > " edit_name
  for index in "${!aliasnames[@]}"; do
    value=${aliasnames[$index]}
    if [ "$value" = "$edit_name" ]; then
      foundalias="true"
      edit_index=$index
    fi
  done
  if [ "$foundalias" != "true" ]; then
    echo "Cannot find that alias, try again and make sure that you type it in exactly"
    exit
  fi
  echo "What would you like to change the NAME to (enter '"'skip'"' to skip)"
  read -r -p "Name > " Name_ans
  if [ "$Name_ans" != "skip" ]; then
    newname=$Name_ans
  else
    newname=${aliasnames[$edit_index]}
  fi
  echo "What would you like to change the DIRECTORY to (enter '"'skip'"' to skip)"
  read -r -p "Directory > " Dir_ans
  if [ "$Dir_ans" != "skip" ]; then
    newdir=$Dir_ans
  else
    newdir=${aliasvalues[$edit_index]}
  fi
  alias_change $newname $newdir $edit_name $edit_index
}

alias_change() {
  newname=$1
  newdir=$2
  edit_name=$3
  edit_index=$4
  source $homedir/alias.sh
  rm $homedir/alias.sh
  alias_initialize
  for loopindex in "${!aliasnames[@]}"; do
    currentname=${aliasnames[$loopindex]}
    if [ "$currentname" != "$edit_name" ]; then
      keepname=${aliasnames[$loopindex]}
      keepdir=${aliasvalues[$loopindex]}
      echo "aliasnames+=("$keepname")" >>$homedir/alias.sh
      echo "aliasvalues+=("$keepdir")" >>$homedir/alias.sh
    else
      echo "aliasnames+=("$newname")" >>$homedir/alias.sh
      echo "aliasvalues+=("$newdir")" >>$homedir/alias.sh
    fi
  done
}

alias_remove() {
  source $homedir/alias.sh
  foundalias="false"
  echo "Removing Alias"
  echo "What is the name of the Alias you would like to remove?"
  read -r -p "Name > " remove_name
  for index in "${!aliasnames[@]}"; do
    value=${aliasnames[$index]}
    if [ "$value" = "$remove_name" ]; then
      foundalias="true"
      edit_index=$index
    fi
  done
  if [ "$foundalias" != "true" ]; then
    echo "Cannot find that alias, try again and make sure that you type it in exactly"
    exit
  fi
  rm $homedir/alias.sh
  alias_initialize
  for loopindex in "${!aliasnames[@]}"; do
    currentname=${aliasnames[$loopindex]}
    if [ "$currentname" != "$remove_name" ]; then
      keepname=${aliasnames[$loopindex]}
      keepdir=${aliasvalues[$loopindex]}
      echo "aliasnames+=("$keepname")" >>$homedir/alias.sh
      echo "aliasvalues+=("$keepdir")" >>$homedir/alias.sh
    fi
  done
}

alias_clear() {
  rm $homedir/alias.sh
  alias_initialize
}

expandPath() {
  x=$1
  local __resultvar=$2
  case $x in
  *"~/"*)
    contains="found"
    x="${HOME}/${x#"~/"}"
    local __finalx=$x
    ;;
  esac
  if [ "$contains" != "found" ]; then
    local __finalx=$x
  fi
  eval $__resultvar="'$__finalx'"
}

showREADME() {
  nano --softwrap --view ~/.config/easydl/README.md
}

cutter() {
  filenames=()
  start_times=()
  end_times=()
  echo -e "${CYAN}Would you like the cuts to favor speed or accuracy?${NC}"
  read -r -p '"speed" or "accuracy">' pref
  echo -e "${CYAN}Enter full path to orignal file (including filename and extension)${NC}"
  read -r -p ">" full_path
  echo ""
  original_path=$(dirname "$full_path")
  original=$(basename "$full_path")
  get_times
  cut
}

get_times() {
  sraw="initial"
  #while the user doesn't input "done" for the filename
  while [ "$sraw" != "done" ]; do
    echo -e "${CYAN}Enter filename (including extension) or \"done\" to start cutting${NC}"
    read -r -p "filename > " sraw
    if [ "$sraw" != "done" ]; then
      filenames+=("$sraw")
      echo -e "${CYAN}Enter ${GREEN}start${CYAN} time${NC}"
      read -r -p "HH:MM:SS > " raw
      #turn the HH:MM:SS formated time to seconds (it can also accept M:SS and S)
      start=$(echo $raw | awk -F\: '{ for(k=NF;k>0;k--) sum+=($k*(60^(NF-k))); print sum }')
      start_times+=("$start")
      echo -e "${CYAN}Enter ${RED}end${CYAN} time${NC}"
      read -r -p "HH:MM:SS > " raw
      end=$(echo $raw | awk -F\: '{ for(k=NF;k>0;k--) sum+=($k*(60^(NF-k))); print sum }')
      end_times+=("$end")
      echo
    fi
  done
}

cut() {
  # original_path is the name of the output variable
  expandPath "$original_path" "original_path"
  pushd "$original_path"
  for index in "${!filenames[@]}"; do
    filename=${filenames[$index]}
    final_start=${start_times[$index]}
    final_end=${end_times[$index]}
    echo
    #execute ffmpeg $original = original file name, $final_start = starting time in seconds, $final_end = ending time in seconds, $filename = filename for cut file
    if [ $pref == "speed" ]; then
      ffmpeg -hide_banner -i "$original" -ss "$final_start" -to "$final_end" -c copy "$filename"
    else
      ffmpeg -hide_banner -i "$original" -ss "$final_start" -to "$final_end" -async 1 "$filename"
    fi
  done
  #reset directory
  popd
}

#start the program by first analyzing the command line options
execute_flags "$1"
